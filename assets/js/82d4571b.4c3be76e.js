"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68988],{45956:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var t=s(74848),r=s(28453);const i={id:"rules",title:"Filter Rules"},l=void 0,o={id:"usage/filtering/rules",title:"Filter Rules",description:"Filter rules can be used not only to scan resources, but also to ignore resources.",source:"@site/docs/usage/filtering/rules.mdx",sourceDirName:"usage/filtering",slug:"/usage/filtering/rules",permalink:"/next/usage/filtering/rules",draft:!1,unlisted:!1,editUrl:"https://github.com/snyk/driftctl-docs/edit/main/docs/usage/filtering/rules.mdx",tags:[],version:"current",frontMatter:{id:"rules",title:"Filter Rules"},sidebar:"docs",previous:{title:".driftignore",permalink:"/next/usage/filtering/driftignore"},next:{title:"Log level",permalink:"/next/usage/log-level"}},c={},a=[{value:"Examples",id:"examples",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["Filter rules can be used not only to ",(0,t.jsx)(n.strong,{children:"scan"})," resources, but also to ",(0,t.jsx)(n.strong,{children:"ignore"})," resources."]}),(0,t.jsx)(n.p,{children:"You can indeed use both inclusion and exclusion logics."})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Filter rules"})," allow you to build complex expression to include and exclude a set of resources in your workflow.\nPowered by expression language ",(0,t.jsx)(n.a,{href:"https://jmespath.org/",children:"JMESPath"})," you could build a complex include and exclude expression."]}),"\n",(0,t.jsxs)(n.p,{children:["Filter rules could be passed to ",(0,t.jsx)(n.code,{children:"scan"})," cmd with ",(0,t.jsx)(n.code,{children:"--filter"})," flag.\nYou could also use the environment variable ",(0,t.jsx)(n.code,{children:"DCTL_FILTER"}),".\nFilter rules syntax in use is actually ",(0,t.jsx)(n.a,{href:"https://jmespath.org/specification.html",children:"JMESPath"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Filter are applied on a normalized struct which contains the following fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": Type of the resource, e.g. ",(0,t.jsx)(n.code,{children:"aws_s3_bucket"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Id"}),": Id of the resource, e.g. ",(0,t.jsx)(n.code,{children:"my-bucket-name"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"# Will include only S3 bucket in the search\n$ driftctl scan --filter \"Type=='aws_s3_bucket'\"\n# OR (beware of escape your shell special chars between double quotes)\n$ driftctl scan --filter $'Type==\\'aws_s3_bucket\\''\n\n# Excludes only s3 bucket named 'my-bucket-name'\n$ driftctl scan --filter $'Type==\\'aws_s3_bucket\\' && Id!=\\'my-bucket-name\\''\n\n# Ignore buckets with an ID prefix of 'terraform-'\n$ driftctl scan --filter $'!(Type==\\'aws_s3_bucket\\' && starts_with(Id, \\'terraform-\\'))'\n\n# Ignore buckets with an ID suffix of '-test'\n$ driftctl scan --filter $'!(Type==\\'aws_s3_bucket\\' && ends_with(Id, \\'-test\\'))'\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(96540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);